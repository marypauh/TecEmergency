/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Estructura.ListaConsultorios;
import Estructura.Consultorios;
import Estructura.Pacientes;
import ServicioEmergencia.ServicioConsultorios;
import javax.swing.JOptionPane;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;
import java.util.Date;

import javax.swing.table.DefaultTableModel;


public class ConsVerde extends javax.swing.JFrame {
      public static Calendar horaSalida;
    public static int promedioV;
    public static int contadorV;
    
    int dato = ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getCantConsultoriosActivos();
    
    public ConsVerde() {
        promedioV = 0;
        contadorV = 0;
        initComponents();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Numero del consultorio");
        modelo.addColumn("Condicion del consultorio");
        for(int i = 1;i<=dato;i++){
            modelo.addRow(new Object[]{i, ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[i].getEstado()});
        }
        tabla_verdes.setModel(modelo);
    }
    public void actualizarTabla(){
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Numero del consultorio");
        modelo.addColumn("Condicion del consultorio");
        for(int i = 1;i<=dato;i++){
            modelo.addRow(new Object[]{i, ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[i].getEstado()});
        }
        tabla_verdes.setModel(modelo);
        modelo.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_verdes = new javax.swing.JTable();
        btnMenu = new javax.swing.JButton();
        btnAtender = new javax.swing.JButton();
        btnLiberarAtender = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(671, 150));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTitulo.setText("Consultorios Verdes");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 48, -1, -1));

        tabla_verdes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla_verdes);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 95, 480, 343));

        btnMenu.setBackground(new java.awt.Color(204, 0, 0));
        btnMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnMenu.setText("Cerrar");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(502, 456, -1, -1));

        btnAtender.setBackground(new java.awt.Color(204, 0, 0));
        btnAtender.setForeground(new java.awt.Color(255, 255, 255));
        btnAtender.setText("Atender");
        btnAtender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtenderActionPerformed(evt);
            }
        });
        getContentPane().add(btnAtender, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 456, -1, -1));

        btnLiberarAtender.setBackground(new java.awt.Color(204, 0, 0));
        btnLiberarAtender.setForeground(new java.awt.Color(255, 255, 255));
        btnLiberarAtender.setText("Liberar y Antender");
        btnLiberarAtender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberarAtenderActionPerformed(evt);
            }
        });
        getContentPane().add(btnLiberarAtender, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 456, -1, -1));

        jLabel1.setText("Seleccione el consultorio");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 460, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0), 2));
        jPanel1.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed

        this.setVisible(false);
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnAtenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtenderActionPerformed
        DefaultTableModel model = (DefaultTableModel)tabla_verdes.getModel();
        int indice = tabla_verdes.getSelectedRow();//para obtener la fila seleccionada
        indice++;
        Pacientes paciente = ServicioEmergencia.Filas.filaVerde.nextPaciente();
        if ((paciente == null) || ( ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].getEstado() == "Ocupado")){//falta ver como validar
            JOptionPane.showMessageDialog(null, "No hay m√°s pacientes por atender o el consultorio no esta libre");
        }else{
         
             //Hora Salida
                horaSalida = Calendar.getInstance();
		horaSalida.setTime(new Date());
              paciente.setHoraSalida(horaSalida);
              System.out.println("Hora Salida" + horaSalida.getTime());
               
              //Cuenta el nuevo paciente
               contadorV++;
           
           //Duracion
           Calendar horaEntrada = paciente.getHoraEntrada();
           System.out.println("Hora Entrada" + horaEntrada.getTime());
           
           int hora, minutos, segundos;
           hora = horaSalida.get(Calendar.HOUR)- horaEntrada.get(Calendar.HOUR);
           
           if (horaSalida.get(Calendar.MINUTE) < horaEntrada.get(Calendar.MINUTE)){
               hora = hora - 1;
             minutos = horaEntrada.get(Calendar.MINUTE) - horaSalida.get(Calendar.MINUTE);
          
           } else {
               minutos = horaSalida.get(Calendar.MINUTE) - horaEntrada.get(Calendar.MINUTE);
           }
               if (horaSalida.get(Calendar.SECOND) < horaEntrada.get(Calendar.SECOND) && minutos == 1){
                   minutos = 0;
                   segundos = horaSalida.get(Calendar.SECOND) - horaEntrada.get(Calendar.SECOND);
               } else {
                    segundos = horaSalida.get(Calendar.SECOND) - horaEntrada.get(Calendar.SECOND);
               }
               
               
               System.out.println("Hora:" +hora+ " minutos:" +minutos+ " segundos:" +segundos);
               
              minutos = minutos + (hora*60);
           
             int promedio = Math.abs(segundos);
              promedio = promedio + (minutos*60);
              System.out.println("Total: " + promedio);
              
              promedioV = promedioV + promedio;
            
            
            ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].atenderSigPaciente(paciente);
            ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].setEstado("Ocupado");
            JOptionPane.showMessageDialog(null, "Atendiendo paciente " + paciente.getFicha() + "en consultorio #" + indice );
        }
        actualizarTabla();
    }//GEN-LAST:event_btnAtenderActionPerformed

    private void btnLiberarAtenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberarAtenderActionPerformed
        DefaultTableModel model = (DefaultTableModel)tabla_verdes.getModel();
        int indice = tabla_verdes.getSelectedRow();//para obtener la fila seleccionada
        indice++; //aumentamos en 1 por que el arreglo empieza en 0
        Pacientes sigPaciente = ServicioEmergencia.Filas.filaVerde.nextPaciente();
        if (ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].getEstado() == "Ocupado"){
            Pacientes pacienteEgresos = ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].getPacienteAtendiendo();
            ServicioEmergencia.Filas.filaEgresos.insertPaciente(pacienteEgresos);
            ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].aumentarAtendidos();
            JOptionPane.showMessageDialog(null, "Paciente " + pacienteEgresos.getFicha() + "ha pasado a la fila de Egresos");
            if (sigPaciente == null) {//falta ver como validar
                ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].setEstado("Libre");
                JOptionPane.showMessageDialog(null, "No hay m√°s pacientes por atender");
            }else{
            
                //Hora Salida
                horaSalida = Calendar.getInstance();
		horaSalida.setTime(new Date());
              pacienteEgresos.setHoraSalida(horaSalida);
              System.out.println("Hora Salida" + horaSalida.getTime());
               
              //Cuenta el nuevo paciente
               contadorV++;
           
           //Duracion
           Calendar horaEntrada = pacienteEgresos.getHoraEntrada();
           System.out.println("Hora Entrada" + horaEntrada.getTime());
           
           int hora, minutos, segundos;
           hora = horaSalida.get(Calendar.HOUR)- horaEntrada.get(Calendar.HOUR);
           
           if (horaSalida.get(Calendar.MINUTE) < horaEntrada.get(Calendar.MINUTE)){
               hora = hora - 1;
             minutos = horaEntrada.get(Calendar.MINUTE) - horaSalida.get(Calendar.MINUTE);
          
           } else {
               minutos = horaSalida.get(Calendar.MINUTE) - horaEntrada.get(Calendar.MINUTE);
           }
               if (horaSalida.get(Calendar.SECOND) < horaEntrada.get(Calendar.SECOND) && minutos == 1){
                   minutos = 0;
                   segundos = horaSalida.get(Calendar.SECOND) - horaEntrada.get(Calendar.SECOND);
               } else {
                    segundos = horaSalida.get(Calendar.SECOND) - horaEntrada.get(Calendar.SECOND);
               }
               
               
               System.out.println("Hora:" +hora+ " minutos:" +minutos+ " segundos:" +segundos);
               
              minutos = minutos + (hora*60);
           
             int promedio = Math.abs(segundos);
              promedio = promedio + (minutos*60);
              
              System.out.println("total " + promedio);
              
              promedioV = promedioV + promedio;
            
                
                ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].atenderSigPaciente(sigPaciente);
                ServicioEmergencia.ServicioConsultorios.consultoriosVerdes.getConsultorios()[indice].setEstado("Ocupado");
                JOptionPane.showMessageDialog(null, "Atendiendo paciente " + sigPaciente.getFicha() + "en consultorio #" + indice );
        }
        }else{JOptionPane.showMessageDialog(null, "Presiona Atender" );}
        actualizarTabla();
    }//GEN-LAST:event_btnLiberarAtenderActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtender;
    private javax.swing.JButton btnLiberarAtender;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tabla_verdes;
    // End of variables declaration//GEN-END:variables
}
